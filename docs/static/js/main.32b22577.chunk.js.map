{"version":3,"sources":["service/Service.js","pages/components/table-data/Tabledata.jsx","pages/components/Earthquakes.jsx","pages/components/Analytics.jsx","pages/Homepage.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["fetchDataset","axios","get","Tabledata","props","console","log","data","columns","label","field","sort","width","rows","striped","bordered","small","Earthquakes","state","this","row","Component","Analytics","euklid","middle","serious","big","handleChange","event","setState","target","name","value","componentDidMount","findZScores","middleLatitudes","filter","e","mag","map","element","latitude","middleLongitudes","longitude","middleDepths","depth","mlatitudesScore","mlongitudesScore","mdepthsScore","slatitudesScore","slongitudesScore","sdepthsScore","blatitudesScore","blongitudesScore","bdepthsScore","mLatitudeScore","mLongitudeScore","mDepthScore","sLatitudeScore","sLongitudeScore","sDepthScore","bLatitudeScore","bLongitudeScore","bDepthScore","calculate","i","Math","sqrt","pow","number","Group","Input","icon","placeholder","position","onChange","color","style","float","onClick","createForm","Homepage","route","location","Service","then","res","Header","title","subTitle","Item","active","Row","cards","deck","Col","md","offset","className","body","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2XAUe,M,sCALXA,aAAe,WACX,OAAOC,IAAMC,IAJF,uC,gBCsEJC,EArEG,SAAAC,GACdC,QAAQC,IAAIF,GACZ,IAAMG,EAAO,CACXC,QAAS,CACP,CACEC,MAAO,KACPC,MAAO,KACPC,KAAM,MACNC,MAAO,IAET,CACEH,MAAO,WACPC,MAAO,WACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,MACPC,MAAO,MACPC,KAAM,MACNC,MAAO,IAET,CACEH,MAAO,WACPC,MAAO,WACPC,KAAM,MACNC,MAAO,IAET,CACEH,MAAO,YACPC,MAAO,YACPC,KAAM,MACNC,MAAO,IAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAGT,CACEH,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,IAET,CACEH,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAGXC,KAAMT,EAAMG,MAEd,OAAGA,IAAS,GAEH,qCAGL,kBAAC,IAAD,CACEO,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLT,KAAMA,KC3CDU,E,YAnBX,WAAYb,GAAQ,IAAD,8BACf,4CAAMA,KAEDc,MAAQ,GAHE,E,sEAQT,IACEX,EAASY,KAAKf,MAAdG,KAER,OADAF,QAAQC,IAAIC,GACJA,EAAKa,MAAQ,GAEb,kBAAC,IAAD,MAEA,kBAAC,EAAD,CAAWb,KAAMA,Q,GAhBPc,a,uBC8KXC,G,kBA5KX,WAAYlB,GAAQ,IAAD,8BACf,4CAAMA,KAkBVmB,OAAS,CACLC,OAAQ,QACRC,QAAS,QACTC,IAAK,SAtBU,EA2BnBC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SA5BlC,EA8BnBC,kBAAoB,WAChB,EAAKC,eA/BU,EAiCnBA,YAAc,WACV,IAAIC,EAAkB,EAAKjB,MAAMX,KAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAI,GAAKD,EAAEC,IAAI,KAAGC,KAAI,SAAAC,GACtE,OAAOA,EAAQC,YAGfC,EAAmB,EAAKxB,MAAMX,KAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAI,GAAKD,EAAEC,IAAI,KAAGC,KAAI,SAAAC,GACvE,OAAOA,EAAQG,aAGfC,EAAe,EAAK1B,MAAMX,KAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAI,GAAKD,EAAEC,IAAI,KAAGC,KAAI,SAAAC,GACnE,OAAOA,EAAQK,SAoCfC,EAAkBX,EAClBY,EAAmBL,EACnBM,EAAeJ,EACfK,EApCmB,EAAK/B,MAAMX,KAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAI,GAAKD,EAAEC,IAAI,KAAGC,KAAI,SAAAC,GACvE,OAAOA,EAAQC,YAoCfS,EAjCoB,EAAKhC,MAAMX,KAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAI,GAAKD,EAAEC,IAAI,KAAGC,KAAI,SAAAC,GACxE,OAAOA,EAAQG,aAiCfQ,EA9BgB,EAAKjC,MAAMX,KAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAI,GAAKD,EAAEC,IAAI,KAAGC,KAAI,SAAAC,GACpE,OAAOA,EAAQK,SA8BfO,EA3Be,EAAKlC,MAAMX,KAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAI,GAAKD,EAAEC,IAAI,MAAIC,KAAI,SAAAC,GACpE,OAAOA,EAAQC,YA2BfY,EAxBgB,EAAKnC,MAAMX,KAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAI,GAAKD,EAAEC,IAAI,MAAIC,KAAI,SAAAC,GACrE,OAAOA,EAAQG,aAwBfW,EArBY,EAAKpC,MAAMX,KAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAI,GAAKD,EAAEC,IAAI,MAAIC,KAAI,SAAAC,GACjE,OAAOA,EAAQK,SA8BnB,EAAKU,eAAiBT,EACtB,EAAKU,gBAAkBT,EACvB,EAAKU,YAAcT,EACnB,EAAKU,eAAiBT,EACtB,EAAKU,gBAAkBT,EACvB,EAAKU,YAAcT,EACnB,EAAKU,eAAiBT,EACtB,EAAKU,gBAAkBT,EACvB,EAAKU,YAAcT,EACnBjD,QAAQC,IAAIsC,IA1GG,EA4GnBoB,UAAY,SAACvB,EAAUE,EAAWE,GAC9B,IAAK,IAAIoB,EAAI,EAAGA,EAAE,KAAMA,IAAI,CACxB,IAAIzC,EAAS0C,KAAKC,KACFD,KAAKE,IAAI,EAAKb,eAAeU,GAAGxB,EAAU,GAC1CyB,KAAKE,IAAI,EAAKZ,gBAAgBS,GAAGtB,EAAW,GAC5CuB,KAAKE,IAAI,EAAKX,YAAYQ,GAAGpB,EAAO,IAChDpB,EAAUyC,KAAKC,KACHD,KAAKE,IAAI,EAAKV,eAAeO,GAAGxB,EAAU,GAC1CyB,KAAKE,IAAI,EAAKT,gBAAgBM,GAAGtB,EAAW,GAC5CuB,KAAKE,IAAI,EAAKR,YAAYK,GAAGpB,EAAO,IAChDnB,EAAMwC,KAAKC,KACCD,KAAKE,IAAI,EAAKP,eAAeI,GAAGxB,EAAU,GAC1CyB,KAAKE,IAAI,EAAKN,gBAAgBG,GAAGtB,EAAW,GAC5CuB,KAAKE,IAAI,EAAKL,YAAYE,GAAGpB,EAAO,IACjD,EAAKtB,OAAOC,OAASA,IAAQ,EAAKD,OAAOC,OAASA,GAClD,EAAKD,OAAOE,QAAUA,IAAS,EAAKF,OAAOE,QAAUA,GACrD,EAAKF,OAAOG,IAAMA,IAAK,EAAKH,OAAOG,IAAMA,GAEhDrB,QAAQC,IAAI,EAAKiB,SA3HjB,EAAKL,MAAQ,CACRX,KAAM,GACNkC,SAAU4B,SACV1B,UAAW0B,SACXxB,MAAOwB,SACPN,YAAa,IARH,E,0EAgIN,IAAD,OACR,OACI,oCACA,kBAAC,IAAD,KACI,kBAAC,IAAKO,MAAN,CAAY7D,MAAM,YACd,kBAAC,IAAK8D,MAAN,CACAC,KAAK,UACLzC,KAAK,WACL0C,YAAY,WACZC,SAAS,SAAS1C,MAAOb,KAAKD,MAAMuB,SAAUkC,SAAUxD,KAAKQ,gBAGjE,kBAAC,IAAK2C,MAAN,CAAY7D,MAAM,aACd,kBAAC,IAAK8D,MAAN,CACAC,KAAK,SACLzC,KAAK,YACL0C,YAAY,YACZC,SAAS,SAAS1C,MAAOb,KAAKD,MAAMyB,UAAWgC,SAAUxD,KAAKQ,gBAGlE,kBAAC,IAAK2C,MAAN,CAAY7D,MAAM,SACd,kBAAC,IAAK8D,MAAN,CACAC,KAAK,WACLzC,KAAK,QACL0C,YAAY,QACZC,SAAS,SAAS1C,MAAOb,KAAKD,MAAM2B,MAAO8B,SAAUxD,KAAKQ,iBAIlE,kBAAC,IAAD,CAAQiD,MAAM,UAAUC,MAAO,CAACC,MAAO,SAAUC,QAAS,kBAAM,EAAKf,UAAU,EAAK9C,MAAMuB,SAAU,EAAKvB,MAAMyB,UAAW,EAAKzB,MAAM2B,SAArI,gB,+BAQJ,OACI,oCACC1B,KAAK6D,iB,gDA/IkB5E,EAAOc,GACnC,OAAOd,M,GA1BSiB,cC0DT4D,E,YAvDX,WAAY7E,GAAQ,IAAD,8BACf,4CAAMA,KAOV8E,MAAQ,SAAAC,GACJ,EAAKtD,SAAS,CAACsD,SAAUA,KATV,EAWnBlD,kBAAoB,WAChBmD,EAAQpF,eAAeqF,MAAK,SAAAC,GACxB,EAAKzD,SAAS,CAACtB,KAAM+E,EAAI/E,OACzBF,QAAQC,IAAI,EAAKY,MAAMX,UAX3B,EAAKW,MAAQ,CACRiE,SAAU,OACV5E,KAAM,IALI,E,sEAkBT,IAAD,SACsBY,KAAKD,MAAxBiE,EADH,EACGA,SAAU5E,EADb,EACaA,KAElB,OADAF,QAAQC,IAAIC,GAER,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAKgF,OAAN,CACAC,MAAM,8BACNC,SAAS,QAET,kBAAC,IAAD,KACI,kBAAC,IAAIC,KAAL,CAAUlB,KAAK,QAAQmB,OAAqB,SAAbR,EAAqBJ,QAAS,kBAAM,EAAKG,MAAM,UAA9E,kBACA,kBAAC,IAAIQ,KAAL,CAAUlB,KAAK,MAAMmB,OAAqB,cAAbR,EAA0BJ,QAAS,kBAAM,EAAKG,MAAM,eAAjF,cAEJ,kBAAC,IAAKU,IAAN,CAAUC,OAAK,EAACC,MAAI,GACpB,kBAAC,IAAKC,IAAN,CAAUC,GAAI,GAAIC,OAAQ,EAAGC,UAAU,UACnC,kBAAC,IAAD,CACAV,MAAM,iBACNU,UAAU,OACVC,KACiB,SAAbhB,EAEA,kBAAC,EAAD,CAAa5E,KAAMA,IAEN,cAAb4E,EAEA,kBAAC,EAAD,CAAW5E,KAAMA,IACf,a,GA9CPc,aCFR+E,MAFf,WAAiB,OAAQ,kBAAC,EAAD,OCQLC,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.32b22577.chunk.js","sourcesContent":["import axios from 'axios';\n// let BASE_URL = 'https://baykatre.com/earthquake-dataset.json'\nlet BASE_URL_NEW = 'https://baykatre.com/csvjson.json'\nclass Service {\n    \n    fetchDataset = () => {\n        return axios.get(BASE_URL_NEW);\n    }\n}\n\nexport default new Service();","import React from 'react'\nimport { MDBDataTable } from 'mdbreact';\n\nconst Tabledata = props => {\n    console.log(props)\n    const data = {\n      columns: [\n        {\n          label: 'ID',\n          field: 'id',\n          sort: 'asc',\n          width: 50\n        },\n        {\n          label: 'Location',\n          field: 'location',\n          sort: 'asc',\n          width: 100\n        },\n        {\n          label: 'Mag',\n          field: 'mag',\n          sort: 'asc',\n          width: 50\n        },\n        {\n          label: 'Latitude',\n          field: 'latitude',\n          sort: 'asc',\n          width: 50\n        },\n        {\n          label: 'Longitude',\n          field: 'longitude',\n          sort: 'asc',\n          width: 50\n        },\n        {\n          label: 'Depth',\n          field: 'depth',\n          sort: 'asc',\n          width: 100\n        }\n        ,\n        {\n          label: 'Date',\n          field: 'date',\n          sort: 'asc',\n          width: 50\n        },\n        {\n          label: 'Time',\n          field: 'time',\n          sort: 'asc',\n          width: 50\n        }\n          ],\n      rows: props.data\n    };\n    if(data === [])\n    \n      return <></>\n    else\n      return (\n        <MDBDataTable\n          striped\n          bordered\n          small\n          data={data}\n        />\n    );\n}\nexport default Tabledata\n","import React, { Component } from 'react'\nimport './Earthquakes.scss'\nimport Tabledata from './table-data/Tabledata'\nimport { Loader } from 'tabler-react'\n\nclass Earthquakes extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             \n        }\n    }\n    \n    render() {\n        const { data } = this.props\n        console.log(data)\n        return (data.row === [] \n            ? \n                <Loader />\n            :\n                <Tabledata data={data}/>\n        )\n    }\n}\nexport default Earthquakes\n","import React, { Component } from 'react'\nimport zscore from 'zscore';\nimport { Form, Button } from 'tabler-react'\nimport { number } from 'prop-types'\nimport {min} from 'simple-statistics'\n\nclass Analytics extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             data: [],\n             latitude: number,\n             longitude: number,\n             depth: number,\n             bDepthScore: [],\n        }\n    }\n    mLatitudeScore\n    mLongitudeScore\n    mDepthScore\n    sLatitudeScore\n    sLongitudeScore\n    sDepthScore\n    bLatitudeScore\n    bLongitudeScore\n    euklid = {\n        middle: 9999999,\n        serious: 9999999,\n        big: 9999999,\n    }\n    static getDerivedStateFromProps(props, state){\n        return props\n    }\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n    componentDidMount = () => {\n        this.findZScores();\n    }\n    findZScores = () => {\n        let middleLatitudes = this.state.data.filter(e => e.mag>5 && e.mag<7).map(element => {\n            return element.latitude\n        })\n        // middleLatitudes = middleLatitudes.map(e => e+=min(middleLatitudes))\n        let middleLongitudes = this.state.data.filter(e => e.mag>5 && e.mag<7).map(element => {\n            return element.longitude\n        })\n        // middleLongitudes = middleLongitudes.map(e => e+=min(middleLongitudes))\n        let middleDepths = this.state.data.filter(e => e.mag>5 && e.mag<7).map(element => {\n            return element.depth\n        })\n        // middleDepths = middleDepths.map(e => e+=min(middleDepths))\n        let seriousLatitudes = this.state.data.filter(e => e.mag>7 && e.mag<8).map(element => {\n            return element.latitude\n        })\n        // seriousLatitudes = seriousLatitudes.map(e => e+=min(seriousLatitudes))\n        let seriousLongitudes = this.state.data.filter(e => e.mag>7 && e.mag<8).map(element => {\n            return element.longitude\n        })\n        // seriousLongitudes = seriousLongitudes.map(e => e+=min(seriousLongitudes))\n        let seriousDepths = this.state.data.filter(e => e.mag>7 && e.mag<8).map(element => {\n            return element.depth\n        })\n        // seriousDepths = seriousDepths.map(e => e+=min(seriousDepths))\n        let bigLatitudes = this.state.data.filter(e => e.mag>8 && e.mag<10).map(element => {\n            return element.latitude\n        })\n        // bigLatitudes = bigLatitudes.map(e => e+=min(bigLatitudes))\n        let bigLongitudes = this.state.data.filter(e => e.mag>8 && e.mag<10).map(element => {\n            return element.longitude\n        })\n        // bigLongitudes = bigLongitudes.map(e => e+=min(bigLongitudes))\n        let bigDepths = this.state.data.filter(e => e.mag>8 && e.mag<10).map(element => {\n            return element.depth\n        })\n        // bigDepths = bigDepths.map(e => e+=min(bigDepths))\n        // let mlatitudesScore = zscore(middleLatitudes)\n        // let mlongitudesScore = zscore(middleLongitudes)\n        // let mdepthsScore = zscore(middleDepths)\n        // let slatitudesScore = zscore(seriousLatitudes)\n        // let slongitudesScore = zscore(seriousLongitudes)\n        // let sdepthsScore = zscore(seriousDepths)\n        // let blatitudesScore = zscore(bigLatitudes)\n        // let blongitudesScore = zscore(bigLongitudes)\n        // let bdepthsScore = zscore(bigDepths)\n        let mlatitudesScore = middleLatitudes\n        let mlongitudesScore = middleLongitudes\n        let mdepthsScore = middleDepths\n        let slatitudesScore = seriousLatitudes\n        let slongitudesScore = seriousLongitudes\n        let sdepthsScore = seriousDepths\n        let blatitudesScore = bigLatitudes\n        let blongitudesScore = bigLongitudes\n        let bdepthsScore = bigDepths\n        // this.mLatitudeScore = mlatitudesScore.map(e => e-min(mlatitudesScore))\n        // this.mLongitudeScore = mlongitudesScore.map(e => e-min(mlongitudesScore))\n        // this.mDepthScore = mdepthsScore.map(e => e-min(mdepthsScore))\n        // this.sLatitudeScore = slatitudesScore.map(e => e-min(slatitudesScore))\n        // this.sLongitudeScore = slongitudesScore.map(e => e-min(slongitudesScore))\n        // this.sDepthScore = sdepthsScore.map(e => e-min(sdepthsScore))\n        // this.bLatitudeScore = blatitudesScore.map(e => e-min(blatitudesScore))\n        // this.bLongitudeScore = blongitudesScore.map(e => e-min(blongitudesScore))\n        // this.bDepthScore = bdepthsScore.map(e => e-min(bdepthsScore))\n        this.mLatitudeScore = mlatitudesScore\n        this.mLongitudeScore = mlongitudesScore\n        this.mDepthScore = mdepthsScore\n        this.sLatitudeScore = slatitudesScore\n        this.sLongitudeScore = slongitudesScore\n        this.sDepthScore = sdepthsScore\n        this.bLatitudeScore = blatitudesScore\n        this.bLongitudeScore = blongitudesScore\n        this.bDepthScore = bdepthsScore\n        console.log(middleDepths)\n    }\n    calculate = (latitude, longitude, depth) => {\n        for (let i = 0; i<6248; i++){\n            let middle = Math.sqrt(\n                            Math.pow(this.mLatitudeScore[i]-latitude, 2)+\n                            Math.pow(this.mLongitudeScore[i]-longitude, 2)+\n                            Math.pow(this.mDepthScore[i]-depth, 2))\n            let serious = Math.sqrt(\n                            Math.pow(this.sLatitudeScore[i]-latitude, 2)+\n                            Math.pow(this.sLongitudeScore[i]-longitude, 2)+\n                            Math.pow(this.sDepthScore[i]-depth, 2))\n            let big = Math.sqrt(\n                            Math.pow(this.bLatitudeScore[i]-latitude, 2)+\n                            Math.pow(this.bLongitudeScore[i]-longitude, 2)+\n                            Math.pow(this.bDepthScore[i]-depth, 2))\n            if(this.euklid.middle > middle) this.euklid.middle = middle\n            if(this.euklid.serious > serious) this.euklid.serious = serious\n            if(this.euklid.big > big) this.euklid.big = big \n        }\n        console.log(this.euklid)\n    }\n    createForm(){\n        return (\n            <>\n            <Form>\n                <Form.Group label=\"Latitude\">\n                    <Form.Input\n                    icon=\"feather\"\n                    name=\"latitude\"\n                    placeholder=\"Latitude\"\n                    position=\"append\" value={this.state.latitude} onChange={this.handleChange}\n                    />\n                </Form.Group>\n                <Form.Group label=\"Longitude\">\n                    <Form.Input\n                    icon=\"layers\"\n                    name=\"longitude\"\n                    placeholder=\"Longitude\"\n                    position=\"append\" value={this.state.longitude} onChange={this.handleChange}\n                    />\n                </Form.Group>\n                <Form.Group label=\"Depth\">\n                    <Form.Input\n                    icon=\"bookmark\"\n                    name=\"depth\"\n                    placeholder=\"Depth\"\n                    position=\"append\" value={this.state.depth} onChange={this.handleChange}\n                    />\n                </Form.Group>\n            </Form>\n            <Button color=\"primary\" style={{float: 'right'}} onClick={() => this.calculate(this.state.latitude, this.state.longitude, this.state.depth)}>Calculate</Button>\n            </>\n        )\n    }\n\n    \n    \n    render() {\n        return (\n            <>\n            {this.createForm()}\n            </>\n        )\n    }\n}\nexport default Analytics\n","import React, { Component } from 'react'\nimport './Homepage.scss'\nimport { Container, Page, Card, Nav, Grid } from 'tabler-react'\nimport \"tabler-react/dist/Tabler.css\";\nimport Service from '../service/Service'\nimport Earthquakes from './components/Earthquakes'\nimport Analytics from './components/Analytics';\n\nclass Homepage extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             location: 'data',\n             data: []\n        }\n    }\n    route = location => {\n        this.setState({location: location})\n    }\n    componentDidMount = () => {\n        Service.fetchDataset().then(res=> {\n            this.setState({data: res.data})\n            console.log(this.state.data)\n        })\n    }\n    \n    render() {\n        const { location, data } = this.state\n        console.log(data)\n        return (\n            <Container>\n                <Page>\n                    <Page.Header\n                    title=\"Data Mining Earthquake Task\"\n                    subTitle=\"...\"\n                    />\n                    <Nav>\n                        <Nav.Item icon=\"globe\" active={location === 'data'} onClick={() => this.route('data')}>Eartquake Data</Nav.Item>\n                        <Nav.Item icon=\"map\" active={location === 'analytics'} onClick={() => this.route('analytics')}>Analytics</Nav.Item>\n                    </Nav>\n                    <Grid.Row cards deck>\n                    <Grid.Col md={10} offset={1} className=\"column\">\n                        <Card \n                        title=\"Eartquake Data\"\n                        className=\"mt-4\"\n                        body={\n                            location === 'data'\n                            ?\n                            <Earthquakes data={data}/>\n                            :\n                            location === 'analytics'\n                            ?\n                            <Analytics data={data}/>\n                            : ''\n                        }\n                        />\n                    </Grid.Col>\n                </Grid.Row>\n                </Page>\n            </Container>\n        )\n    }\n}\nexport default Homepage\n","import React from 'react';\nimport './App.css';\nimport Homepage from './pages/Homepage'\n\nfunction App() { return (<Homepage />) }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}